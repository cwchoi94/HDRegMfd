// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// AM_each
List AM_each(List SBF_comp, arma::vec Ymu, String Yspace, double lambda, double R, String penalty, double gamma, double phi, double eta, int max_iter, double threshold);
RcppExport SEXP _HDRegMfd_AM_each(SEXP SBF_compSEXP, SEXP YmuSEXP, SEXP YspaceSEXP, SEXP lambdaSEXP, SEXP RSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP etaSEXP, SEXP max_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type SBF_comp(SBF_compSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Ymu(YmuSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_each(SBF_comp, Ymu, Yspace, lambda, R, penalty, gamma, phi, eta, max_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// get_loss_CV_AM_average
double get_loss_CV_AM_average(List SBF_comp, arma::mat Xnew, arma::mat LogYnew, arma::vec Ymu, String Yspace, double lambda, double R, String cv_type, String penalty, double gamma, double cv_const);
RcppExport SEXP _HDRegMfd_get_loss_CV_AM_average(SEXP SBF_compSEXP, SEXP XnewSEXP, SEXP LogYnewSEXP, SEXP YmuSEXP, SEXP YspaceSEXP, SEXP lambdaSEXP, SEXP RSEXP, SEXP cv_typeSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP cv_constSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type SBF_comp(SBF_compSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogYnew(LogYnewSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Ymu(YmuSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    Rcpp::traits::input_parameter< String >::type cv_type(cv_typeSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type cv_const(cv_constSEXP);
    rcpp_result_gen = Rcpp::wrap(get_loss_CV_AM_average(SBF_comp, Xnew, LogYnew, Ymu, Yspace, lambda, R, cv_type, penalty, gamma, cv_const));
    return rcpp_result_gen;
END_RCPP
}
// get_loss_CV_AM_integral
double get_loss_CV_AM_integral(List SBF_comp, arma::mat Xnew, arma::mat LogYnew, arma::vec Ymu, String Yspace, double lambda, double R, String cv_type, String penalty, double gamma, double cv_const);
RcppExport SEXP _HDRegMfd_get_loss_CV_AM_integral(SEXP SBF_compSEXP, SEXP XnewSEXP, SEXP LogYnewSEXP, SEXP YmuSEXP, SEXP YspaceSEXP, SEXP lambdaSEXP, SEXP RSEXP, SEXP cv_typeSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP cv_constSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type SBF_comp(SBF_compSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogYnew(LogYnewSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Ymu(YmuSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    Rcpp::traits::input_parameter< String >::type cv_type(cv_typeSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type cv_const(cv_constSEXP);
    rcpp_result_gen = Rcpp::wrap(get_loss_CV_AM_integral(SBF_comp, Xnew, LogYnew, Ymu, Yspace, lambda, R, cv_type, penalty, gamma, cv_const));
    return rcpp_result_gen;
END_RCPP
}
// AM_CBS_GCV
List AM_CBS_GCV(arma::mat X, arma::mat LogY, arma::mat Xnew, arma::mat LogYnew, arma::vec Ymu, String Yspace, arma::mat bandwidths_mat, arma::vec grids, arma::vec weights, arma::vec lambda_list, arma::vec Xdim_max_list, arma::vec R_list, arma::mat index_mat, String cv_type, String penalty, double gamma, int degree, String Kdenom_method, double cv_const, int max_cv_iter, double threshold);
RcppExport SEXP _HDRegMfd_AM_CBS_GCV(SEXP XSEXP, SEXP LogYSEXP, SEXP XnewSEXP, SEXP LogYnewSEXP, SEXP YmuSEXP, SEXP YspaceSEXP, SEXP bandwidths_matSEXP, SEXP gridsSEXP, SEXP weightsSEXP, SEXP lambda_listSEXP, SEXP Xdim_max_listSEXP, SEXP R_listSEXP, SEXP index_matSEXP, SEXP cv_typeSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP degreeSEXP, SEXP Kdenom_methodSEXP, SEXP cv_constSEXP, SEXP max_cv_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogY(LogYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogYnew(LogYnewSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Ymu(YmuSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type bandwidths_mat(bandwidths_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type grids(gridsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xdim_max_list(Xdim_max_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_list(R_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index_mat(index_matSEXP);
    Rcpp::traits::input_parameter< String >::type cv_type(cv_typeSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< String >::type Kdenom_method(Kdenom_methodSEXP);
    Rcpp::traits::input_parameter< double >::type cv_const(cv_constSEXP);
    Rcpp::traits::input_parameter< int >::type max_cv_iter(max_cv_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_CBS_GCV(X, LogY, Xnew, LogYnew, Ymu, Yspace, bandwidths_mat, grids, weights, lambda_list, Xdim_max_list, R_list, index_mat, cv_type, penalty, gamma, degree, Kdenom_method, cv_const, max_cv_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// AM_CBS_kfold
List AM_CBS_kfold(List X_list, List LogY_list, List Xnew_list, List LogYnew_list, List Ymu_list, String Yspace, int kfold, arma::mat bandwidths_mat, arma::vec grids, arma::vec weights, arma::vec lambda_list, arma::vec Xdim_max_list, arma::vec R_list, arma::mat index_mat, String cv_type, String penalty, double gamma, int degree, String Kdenom_method, double cv_const, int max_cv_iter, double threshold);
RcppExport SEXP _HDRegMfd_AM_CBS_kfold(SEXP X_listSEXP, SEXP LogY_listSEXP, SEXP Xnew_listSEXP, SEXP LogYnew_listSEXP, SEXP Ymu_listSEXP, SEXP YspaceSEXP, SEXP kfoldSEXP, SEXP bandwidths_matSEXP, SEXP gridsSEXP, SEXP weightsSEXP, SEXP lambda_listSEXP, SEXP Xdim_max_listSEXP, SEXP R_listSEXP, SEXP index_matSEXP, SEXP cv_typeSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP degreeSEXP, SEXP Kdenom_methodSEXP, SEXP cv_constSEXP, SEXP max_cv_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< List >::type LogY_list(LogY_listSEXP);
    Rcpp::traits::input_parameter< List >::type Xnew_list(Xnew_listSEXP);
    Rcpp::traits::input_parameter< List >::type LogYnew_list(LogYnew_listSEXP);
    Rcpp::traits::input_parameter< List >::type Ymu_list(Ymu_listSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< int >::type kfold(kfoldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type bandwidths_mat(bandwidths_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type grids(gridsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xdim_max_list(Xdim_max_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_list(R_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index_mat(index_matSEXP);
    Rcpp::traits::input_parameter< String >::type cv_type(cv_typeSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< String >::type Kdenom_method(Kdenom_methodSEXP);
    Rcpp::traits::input_parameter< double >::type cv_const(cv_constSEXP);
    Rcpp::traits::input_parameter< int >::type max_cv_iter(max_cv_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_CBS_kfold(X_list, LogY_list, Xnew_list, LogYnew_list, Ymu_list, Yspace, kfold, bandwidths_mat, grids, weights, lambda_list, Xdim_max_list, R_list, index_mat, cv_type, penalty, gamma, degree, Kdenom_method, cv_const, max_cv_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// AM_CV_average
List AM_CV_average(List SBF_comp, arma::mat Xnew, arma::mat LogYnew, arma::vec Ymu, String Yspace, arma::vec lambda_list, arma::vec Xdim_max_list, arma::vec R_list, arma::mat index_mat, String cv_type, String penalty, double gamma, double cv_const, int max_cv_iter, double threshold);
RcppExport SEXP _HDRegMfd_AM_CV_average(SEXP SBF_compSEXP, SEXP XnewSEXP, SEXP LogYnewSEXP, SEXP YmuSEXP, SEXP YspaceSEXP, SEXP lambda_listSEXP, SEXP Xdim_max_listSEXP, SEXP R_listSEXP, SEXP index_matSEXP, SEXP cv_typeSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP cv_constSEXP, SEXP max_cv_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type SBF_comp(SBF_compSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogYnew(LogYnewSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Ymu(YmuSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xdim_max_list(Xdim_max_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_list(R_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index_mat(index_matSEXP);
    Rcpp::traits::input_parameter< String >::type cv_type(cv_typeSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type cv_const(cv_constSEXP);
    Rcpp::traits::input_parameter< int >::type max_cv_iter(max_cv_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_CV_average(SBF_comp, Xnew, LogYnew, Ymu, Yspace, lambda_list, Xdim_max_list, R_list, index_mat, cv_type, penalty, gamma, cv_const, max_cv_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// AM_CV_integral
List AM_CV_integral(List SBF_comp, arma::mat Xnew, arma::mat LogYnew, arma::vec Ymu, String Yspace, arma::vec lambda_list, arma::vec Xdim_max_list, arma::vec R_list, arma::mat index_mat, String cv_type, String penalty, double gamma, double cv_const, int max_cv_iter, double threshold);
RcppExport SEXP _HDRegMfd_AM_CV_integral(SEXP SBF_compSEXP, SEXP XnewSEXP, SEXP LogYnewSEXP, SEXP YmuSEXP, SEXP YspaceSEXP, SEXP lambda_listSEXP, SEXP Xdim_max_listSEXP, SEXP R_listSEXP, SEXP index_matSEXP, SEXP cv_typeSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP cv_constSEXP, SEXP max_cv_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type SBF_comp(SBF_compSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogYnew(LogYnewSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Ymu(YmuSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xdim_max_list(Xdim_max_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_list(R_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index_mat(index_matSEXP);
    Rcpp::traits::input_parameter< String >::type cv_type(cv_typeSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type cv_const(cv_constSEXP);
    Rcpp::traits::input_parameter< int >::type max_cv_iter(max_cv_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_CV_integral(SBF_comp, Xnew, LogYnew, Ymu, Yspace, lambda_list, Xdim_max_list, R_list, index_mat, cv_type, penalty, gamma, cv_const, max_cv_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// GLM_each
List GLM_each(List Xorg, arma::mat Yorg, double lambda, int Xdim_max, double R, String penalty, String link, double gamma, double phi, double eta, int max_iter, double threshold);
RcppExport SEXP _HDRegMfd_GLM_each(SEXP XorgSEXP, SEXP YorgSEXP, SEXP lambdaSEXP, SEXP Xdim_maxSEXP, SEXP RSEXP, SEXP penaltySEXP, SEXP linkSEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP etaSEXP, SEXP max_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Xorg(XorgSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Yorg(YorgSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type Xdim_max(Xdim_maxSEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(GLM_each(Xorg, Yorg, lambda, Xdim_max, R, penalty, link, gamma, phi, eta, max_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// GLM_CV
List GLM_CV(List X, arma::mat Y, arma::vec lambda_list, arma::vec Xdim_max_list, arma::vec R_list, String cv_type, String penalty, String link, double gamma, double phi, int max_cv_iter, double threshold);
RcppExport SEXP _HDRegMfd_GLM_CV(SEXP XSEXP, SEXP YSEXP, SEXP lambda_listSEXP, SEXP Xdim_max_listSEXP, SEXP R_listSEXP, SEXP cv_typeSEXP, SEXP penaltySEXP, SEXP linkSEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP max_cv_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xdim_max_list(Xdim_max_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_list(R_listSEXP);
    Rcpp::traits::input_parameter< String >::type cv_type(cv_typeSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type max_cv_iter(max_cv_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(GLM_CV(X, Y, lambda_list, Xdim_max_list, R_list, cv_type, penalty, link, gamma, phi, max_cv_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// GLM_GCV
List GLM_GCV(List X, arma::mat Y, List Xnew, arma::mat Ynew, arma::vec lambda_list, arma::vec Xdim_max_list, arma::vec R_list, String penalty, String link, double gamma, double phi, int max_cv_iter, double threshold);
RcppExport SEXP _HDRegMfd_GLM_GCV(SEXP XSEXP, SEXP YSEXP, SEXP XnewSEXP, SEXP YnewSEXP, SEXP lambda_listSEXP, SEXP Xdim_max_listSEXP, SEXP R_listSEXP, SEXP penaltySEXP, SEXP linkSEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP max_cv_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ynew(YnewSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xdim_max_list(Xdim_max_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_list(R_listSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type max_cv_iter(max_cv_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(GLM_GCV(X, Y, Xnew, Ynew, lambda_list, Xdim_max_list, R_list, penalty, link, gamma, phi, max_cv_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// Link
arma::mat Link(arma::mat u, String link);
RcppExport SEXP _HDRegMfd_Link(SEXP uSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(Link(u, link));
    return rcpp_result_gen;
END_RCPP
}
// Inv_Link
arma::mat Inv_Link(arma::mat u, String link);
RcppExport SEXP _HDRegMfd_Inv_Link(SEXP uSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(Inv_Link(u, link));
    return rcpp_result_gen;
END_RCPP
}
// Psi
arma::mat Psi(arma::mat u, String link);
RcppExport SEXP _HDRegMfd_Psi(SEXP uSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(Psi(u, link));
    return rcpp_result_gen;
END_RCPP
}
// Psi_1d
arma::mat Psi_1d(arma::mat u, String link);
RcppExport SEXP _HDRegMfd_Psi_1d(SEXP uSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(Psi_1d(u, link));
    return rcpp_result_gen;
END_RCPP
}
// Psi_2d
arma::mat Psi_2d(arma::mat u, String link);
RcppExport SEXP _HDRegMfd_Psi_2d(SEXP uSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(Psi_2d(u, link));
    return rcpp_result_gen;
END_RCPP
}
// GLM_Kfold
List GLM_Kfold(List X_list, List Y_list, List Xnew_list, List Ynew_list, int kfold, arma::vec lambda_list, arma::vec Xdim_max_list, arma::vec R_list, String penalty, String link, double phi, double gamma, int max_cv_iter, double threshold);
RcppExport SEXP _HDRegMfd_GLM_Kfold(SEXP X_listSEXP, SEXP Y_listSEXP, SEXP Xnew_listSEXP, SEXP Ynew_listSEXP, SEXP kfoldSEXP, SEXP lambda_listSEXP, SEXP Xdim_max_listSEXP, SEXP R_listSEXP, SEXP penaltySEXP, SEXP linkSEXP, SEXP phiSEXP, SEXP gammaSEXP, SEXP max_cv_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< List >::type Y_list(Y_listSEXP);
    Rcpp::traits::input_parameter< List >::type Xnew_list(Xnew_listSEXP);
    Rcpp::traits::input_parameter< List >::type Ynew_list(Ynew_listSEXP);
    Rcpp::traits::input_parameter< int >::type kfold(kfoldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xdim_max_list(Xdim_max_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_list(R_listSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< String >::type link(linkSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type max_cv_iter(max_cv_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(GLM_Kfold(X_list, Y_list, Xnew_list, Ynew_list, kfold, lambda_list, Xdim_max_list, R_list, penalty, link, phi, gamma, max_cv_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// normalized_Kernel
List normalized_Kernel(arma::mat X, arma::vec bandwidths, arma::vec grids, arma::vec weights, int degree, String Kdenom_method);
RcppExport SEXP _HDRegMfd_normalized_Kernel(SEXP XSEXP, SEXP bandwidthsSEXP, SEXP gridsSEXP, SEXP weightsSEXP, SEXP degreeSEXP, SEXP Kdenom_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bandwidths(bandwidthsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type grids(gridsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< String >::type Kdenom_method(Kdenom_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(normalized_Kernel(X, bandwidths, grids, weights, degree, Kdenom_method));
    return rcpp_result_gen;
END_RCPP
}
// KDE_
List KDE_(arma::mat X, arma::vec bandwidths, arma::vec grids, arma::vec weights, int degree, String Kdenom_method, bool is_proj);
RcppExport SEXP _HDRegMfd_KDE_(SEXP XSEXP, SEXP bandwidthsSEXP, SEXP gridsSEXP, SEXP weightsSEXP, SEXP degreeSEXP, SEXP Kdenom_methodSEXP, SEXP is_projSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bandwidths(bandwidthsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type grids(gridsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< String >::type Kdenom_method(Kdenom_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type is_proj(is_projSEXP);
    rcpp_result_gen = Rcpp::wrap(KDE_(X, bandwidths, grids, weights, degree, Kdenom_method, is_proj));
    return rcpp_result_gen;
END_RCPP
}
// LM_each
List LM_each(List Xorg, arma::mat LogY, arma::vec Ymu, String Yspace, double lambda, int Xdim_max, double R, String penalty, double gamma, double phi, double eta, int max_iter, double threshold);
RcppExport SEXP _HDRegMfd_LM_each(SEXP XorgSEXP, SEXP LogYSEXP, SEXP YmuSEXP, SEXP YspaceSEXP, SEXP lambdaSEXP, SEXP Xdim_maxSEXP, SEXP RSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP etaSEXP, SEXP max_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Xorg(XorgSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogY(LogYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Ymu(YmuSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type Xdim_max(Xdim_maxSEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(LM_each(Xorg, LogY, Ymu, Yspace, lambda, Xdim_max, R, penalty, gamma, phi, eta, max_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// LM_CV
List LM_CV(List X, arma::mat LogY, arma::vec Ymu, String Yspace, arma::vec lambda_list, arma::vec Xdim_max_list, arma::vec R_list, String cv_type, String penalty, double gamma, double phi, int max_cv_iter, double threshold);
RcppExport SEXP _HDRegMfd_LM_CV(SEXP XSEXP, SEXP LogYSEXP, SEXP YmuSEXP, SEXP YspaceSEXP, SEXP lambda_listSEXP, SEXP Xdim_max_listSEXP, SEXP R_listSEXP, SEXP cv_typeSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP max_cv_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogY(LogYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Ymu(YmuSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xdim_max_list(Xdim_max_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_list(R_listSEXP);
    Rcpp::traits::input_parameter< String >::type cv_type(cv_typeSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type max_cv_iter(max_cv_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(LM_CV(X, LogY, Ymu, Yspace, lambda_list, Xdim_max_list, R_list, cv_type, penalty, gamma, phi, max_cv_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// LM_GCV
List LM_GCV(List X, arma::mat LogY, List Xnew, arma::mat LogYnew, arma::vec Ymu, String Yspace, arma::vec lambda_list, arma::vec Xdim_max_list, arma::vec R_list, String penalty, double gamma, double phi, int max_cv_iter, double threshold);
RcppExport SEXP _HDRegMfd_LM_GCV(SEXP XSEXP, SEXP LogYSEXP, SEXP XnewSEXP, SEXP LogYnewSEXP, SEXP YmuSEXP, SEXP YspaceSEXP, SEXP lambda_listSEXP, SEXP Xdim_max_listSEXP, SEXP R_listSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP max_cv_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogY(LogYSEXP);
    Rcpp::traits::input_parameter< List >::type Xnew(XnewSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogYnew(LogYnewSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Ymu(YmuSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xdim_max_list(Xdim_max_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_list(R_listSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type max_cv_iter(max_cv_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(LM_GCV(X, LogY, Xnew, LogYnew, Ymu, Yspace, lambda_list, Xdim_max_list, R_list, penalty, gamma, phi, max_cv_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// LM_Kfold
List LM_Kfold(List X_list, List LogY_list, List Xnew_list, List LogYnew_list, List Ymu_list, String Yspace, int kfold, arma::vec lambda_list, arma::vec Xdim_max_list, arma::vec R_list, String penalty, double gamma, double phi, int max_cv_iter, double threshold);
RcppExport SEXP _HDRegMfd_LM_Kfold(SEXP X_listSEXP, SEXP LogY_listSEXP, SEXP Xnew_listSEXP, SEXP LogYnew_listSEXP, SEXP Ymu_listSEXP, SEXP YspaceSEXP, SEXP kfoldSEXP, SEXP lambda_listSEXP, SEXP Xdim_max_listSEXP, SEXP R_listSEXP, SEXP penaltySEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP max_cv_iterSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< List >::type LogY_list(LogY_listSEXP);
    Rcpp::traits::input_parameter< List >::type Xnew_list(Xnew_listSEXP);
    Rcpp::traits::input_parameter< List >::type LogYnew_list(LogYnew_listSEXP);
    Rcpp::traits::input_parameter< List >::type Ymu_list(Ymu_listSEXP);
    Rcpp::traits::input_parameter< String >::type Yspace(YspaceSEXP);
    Rcpp::traits::input_parameter< int >::type kfold(kfoldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_list(lambda_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xdim_max_list(Xdim_max_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_list(R_listSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type max_cv_iter(max_cv_iterSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(LM_Kfold(X_list, LogY_list, Xnew_list, LogYnew_list, Ymu_list, Yspace, kfold, lambda_list, Xdim_max_list, R_list, penalty, gamma, phi, max_cv_iter, threshold));
    return rcpp_result_gen;
END_RCPP
}
// PCA_list
List PCA_list(List Xall, double alpha);
RcppExport SEXP _HDRegMfd_PCA_list(SEXP XallSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type Xall(XallSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(PCA_list(Xall, alpha));
    return rcpp_result_gen;
END_RCPP
}
// predict_PCA_list
List predict_PCA_list(List pca, List Xnew);
RcppExport SEXP _HDRegMfd_predict_PCA_list(SEXP pcaSEXP, SEXP XnewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pca(pcaSEXP);
    Rcpp::traits::input_parameter< List >::type Xnew(XnewSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_PCA_list(pca, Xnew));
    return rcpp_result_gen;
END_RCPP
}
// LASSO_sol
arma::mat LASSO_sol(arma::mat xy, double xx, double normxy, double lambda, double kappa, double gamma);
RcppExport SEXP _HDRegMfd_LASSO_sol(SEXP xySEXP, SEXP xxSEXP, SEXP normxySEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xy(xySEXP);
    Rcpp::traits::input_parameter< double >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< double >::type normxy(normxySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(LASSO_sol(xy, xx, normxy, lambda, kappa, gamma));
    return rcpp_result_gen;
END_RCPP
}
// LASSO_sol2
arma::mat LASSO_sol2(arma::mat xy, double xx, double normxy, double lambda, double kappa, double gamma);
RcppExport SEXP _HDRegMfd_LASSO_sol2(SEXP xySEXP, SEXP xxSEXP, SEXP normxySEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xy(xySEXP);
    Rcpp::traits::input_parameter< double >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< double >::type normxy(normxySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(LASSO_sol2(xy, xx, normxy, lambda, kappa, gamma));
    return rcpp_result_gen;
END_RCPP
}
// SCAD_sol
arma::mat SCAD_sol(arma::mat xy, double xx, double normxy, double lambda, double kappa, double gamma);
RcppExport SEXP _HDRegMfd_SCAD_sol(SEXP xySEXP, SEXP xxSEXP, SEXP normxySEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xy(xySEXP);
    Rcpp::traits::input_parameter< double >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< double >::type normxy(normxySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(SCAD_sol(xy, xx, normxy, lambda, kappa, gamma));
    return rcpp_result_gen;
END_RCPP
}
// SCAD_sol2
arma::mat SCAD_sol2(arma::mat xy, double xx, double normxy, double lambda, double kappa, double gamma);
RcppExport SEXP _HDRegMfd_SCAD_sol2(SEXP xySEXP, SEXP xxSEXP, SEXP normxySEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xy(xySEXP);
    Rcpp::traits::input_parameter< double >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< double >::type normxy(normxySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(SCAD_sol2(xy, xx, normxy, lambda, kappa, gamma));
    return rcpp_result_gen;
END_RCPP
}
// MCP_sol
arma::mat MCP_sol(arma::mat xy, double xx, double normxy, double lambda, double kappa, double gamma);
RcppExport SEXP _HDRegMfd_MCP_sol(SEXP xySEXP, SEXP xxSEXP, SEXP normxySEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xy(xySEXP);
    Rcpp::traits::input_parameter< double >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< double >::type normxy(normxySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(MCP_sol(xy, xx, normxy, lambda, kappa, gamma));
    return rcpp_result_gen;
END_RCPP
}
// MCP_sol2
arma::mat MCP_sol2(arma::mat xy, double xx, double normxy, double lambda, double kappa, double gamma);
RcppExport SEXP _HDRegMfd_MCP_sol2(SEXP xySEXP, SEXP xxSEXP, SEXP normxySEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xy(xySEXP);
    Rcpp::traits::input_parameter< double >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< double >::type normxy(normxySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(MCP_sol2(xy, xx, normxy, lambda, kappa, gamma));
    return rcpp_result_gen;
END_RCPP
}
// SBF_preprocessing
List SBF_preprocessing(arma::mat X, arma::mat LogY, arma::vec bandwidths, arma::vec grids, arma::vec weights, int degree, String Kdenom_method);
RcppExport SEXP _HDRegMfd_SBF_preprocessing(SEXP XSEXP, SEXP LogYSEXP, SEXP bandwidthsSEXP, SEXP gridsSEXP, SEXP weightsSEXP, SEXP degreeSEXP, SEXP Kdenom_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LogY(LogYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bandwidths(bandwidthsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type grids(gridsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< String >::type Kdenom_method(Kdenom_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(SBF_preprocessing(X, LogY, bandwidths, grids, weights, degree, Kdenom_method));
    return rcpp_result_gen;
END_RCPP
}
// SBF_preprocessing_reduce_dim
List SBF_preprocessing_reduce_dim(List SBF_comp, double Xdim_max, arma::mat index_mat);
RcppExport SEXP _HDRegMfd_SBF_preprocessing_reduce_dim(SEXP SBF_compSEXP, SEXP Xdim_maxSEXP, SEXP index_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type SBF_comp(SBF_compSEXP);
    Rcpp::traits::input_parameter< double >::type Xdim_max(Xdim_maxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index_mat(index_matSEXP);
    rcpp_result_gen = Rcpp::wrap(SBF_preprocessing_reduce_dim(SBF_comp, Xdim_max, index_mat));
    return rcpp_result_gen;
END_RCPP
}
// multi_4d_ind_to_single
int multi_4d_ind_to_single(int j1, int j2, int k1, int k2, int p, int g);
RcppExport SEXP _HDRegMfd_multi_4d_ind_to_single(SEXP j1SEXP, SEXP j2SEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP pSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j1(j1SEXP);
    Rcpp::traits::input_parameter< int >::type j2(j2SEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_4d_ind_to_single(j1, j2, k1, k2, p, g));
    return rcpp_result_gen;
END_RCPP
}
// single_ind_to_multi_4d
IntegerVector single_ind_to_multi_4d(int j3, int p, int g);
RcppExport SEXP _HDRegMfd_single_ind_to_multi_4d(SEXP j3SEXP, SEXP pSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j3(j3SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(single_ind_to_multi_4d(j3, p, g));
    return rcpp_result_gen;
END_RCPP
}
// multi_2d_ind_to_single_range
IntegerVector multi_2d_ind_to_single_range(int j1, int j2, int p, int g);
RcppExport SEXP _HDRegMfd_multi_2d_ind_to_single_range(SEXP j1SEXP, SEXP j2SEXP, SEXP pSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j1(j1SEXP);
    Rcpp::traits::input_parameter< int >::type j2(j2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_2d_ind_to_single_range(j1, j2, p, g));
    return rcpp_result_gen;
END_RCPP
}
// multi_3d_ind_to_single_range
IntegerVector multi_3d_ind_to_single_range(int j1, int j2, int k1, int p, int g);
RcppExport SEXP _HDRegMfd_multi_3d_ind_to_single_range(SEXP j1SEXP, SEXP j2SEXP, SEXP k1SEXP, SEXP pSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j1(j1SEXP);
    Rcpp::traits::input_parameter< int >::type j2(j2SEXP);
    Rcpp::traits::input_parameter< int >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_3d_ind_to_single_range(j1, j2, k1, p, g));
    return rcpp_result_gen;
END_RCPP
}
// numerical_integral_1d
double numerical_integral_1d(arma::vec weights, arma::vec func);
RcppExport SEXP _HDRegMfd_numerical_integral_1d(SEXP weightsSEXP, SEXP funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type func(funcSEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_integral_1d(weights, func));
    return rcpp_result_gen;
END_RCPP
}
// numerical_integral_3d_to_2d
arma::mat numerical_integral_3d_to_2d(arma::vec weights, arma::cube func);
RcppExport SEXP _HDRegMfd_numerical_integral_3d_to_2d(SEXP weightsSEXP, SEXP funcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type func(funcSEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_integral_3d_to_2d(weights, func));
    return rcpp_result_gen;
END_RCPP
}
// numerical_integral_3d
arma::cube numerical_integral_3d(arma::vec weights, arma::cube func1, arma::cube func2);
RcppExport SEXP _HDRegMfd_numerical_integral_3d(SEXP weightsSEXP, SEXP func1SEXP, SEXP func2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type func1(func1SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type func2(func2SEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_integral_3d(weights, func1, func2));
    return rcpp_result_gen;
END_RCPP
}
// numerical_integral_2d
arma::mat numerical_integral_2d(arma::mat func1, arma::mat func2);
RcppExport SEXP _HDRegMfd_numerical_integral_2d(SEXP func1SEXP, SEXP func2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type func1(func1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type func2(func2SEXP);
    rcpp_result_gen = Rcpp::wrap(numerical_integral_2d(func1, func2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HDRegMfd_AM_each", (DL_FUNC) &_HDRegMfd_AM_each, 11},
    {"_HDRegMfd_get_loss_CV_AM_average", (DL_FUNC) &_HDRegMfd_get_loss_CV_AM_average, 11},
    {"_HDRegMfd_get_loss_CV_AM_integral", (DL_FUNC) &_HDRegMfd_get_loss_CV_AM_integral, 11},
    {"_HDRegMfd_AM_CBS_GCV", (DL_FUNC) &_HDRegMfd_AM_CBS_GCV, 21},
    {"_HDRegMfd_AM_CBS_kfold", (DL_FUNC) &_HDRegMfd_AM_CBS_kfold, 22},
    {"_HDRegMfd_AM_CV_average", (DL_FUNC) &_HDRegMfd_AM_CV_average, 15},
    {"_HDRegMfd_AM_CV_integral", (DL_FUNC) &_HDRegMfd_AM_CV_integral, 15},
    {"_HDRegMfd_GLM_each", (DL_FUNC) &_HDRegMfd_GLM_each, 12},
    {"_HDRegMfd_GLM_CV", (DL_FUNC) &_HDRegMfd_GLM_CV, 12},
    {"_HDRegMfd_GLM_GCV", (DL_FUNC) &_HDRegMfd_GLM_GCV, 13},
    {"_HDRegMfd_Link", (DL_FUNC) &_HDRegMfd_Link, 2},
    {"_HDRegMfd_Inv_Link", (DL_FUNC) &_HDRegMfd_Inv_Link, 2},
    {"_HDRegMfd_Psi", (DL_FUNC) &_HDRegMfd_Psi, 2},
    {"_HDRegMfd_Psi_1d", (DL_FUNC) &_HDRegMfd_Psi_1d, 2},
    {"_HDRegMfd_Psi_2d", (DL_FUNC) &_HDRegMfd_Psi_2d, 2},
    {"_HDRegMfd_GLM_Kfold", (DL_FUNC) &_HDRegMfd_GLM_Kfold, 14},
    {"_HDRegMfd_normalized_Kernel", (DL_FUNC) &_HDRegMfd_normalized_Kernel, 6},
    {"_HDRegMfd_KDE_", (DL_FUNC) &_HDRegMfd_KDE_, 7},
    {"_HDRegMfd_LM_each", (DL_FUNC) &_HDRegMfd_LM_each, 13},
    {"_HDRegMfd_LM_CV", (DL_FUNC) &_HDRegMfd_LM_CV, 13},
    {"_HDRegMfd_LM_GCV", (DL_FUNC) &_HDRegMfd_LM_GCV, 14},
    {"_HDRegMfd_LM_Kfold", (DL_FUNC) &_HDRegMfd_LM_Kfold, 15},
    {"_HDRegMfd_PCA_list", (DL_FUNC) &_HDRegMfd_PCA_list, 2},
    {"_HDRegMfd_predict_PCA_list", (DL_FUNC) &_HDRegMfd_predict_PCA_list, 2},
    {"_HDRegMfd_LASSO_sol", (DL_FUNC) &_HDRegMfd_LASSO_sol, 6},
    {"_HDRegMfd_LASSO_sol2", (DL_FUNC) &_HDRegMfd_LASSO_sol2, 6},
    {"_HDRegMfd_SCAD_sol", (DL_FUNC) &_HDRegMfd_SCAD_sol, 6},
    {"_HDRegMfd_SCAD_sol2", (DL_FUNC) &_HDRegMfd_SCAD_sol2, 6},
    {"_HDRegMfd_MCP_sol", (DL_FUNC) &_HDRegMfd_MCP_sol, 6},
    {"_HDRegMfd_MCP_sol2", (DL_FUNC) &_HDRegMfd_MCP_sol2, 6},
    {"_HDRegMfd_SBF_preprocessing", (DL_FUNC) &_HDRegMfd_SBF_preprocessing, 7},
    {"_HDRegMfd_SBF_preprocessing_reduce_dim", (DL_FUNC) &_HDRegMfd_SBF_preprocessing_reduce_dim, 3},
    {"_HDRegMfd_multi_4d_ind_to_single", (DL_FUNC) &_HDRegMfd_multi_4d_ind_to_single, 6},
    {"_HDRegMfd_single_ind_to_multi_4d", (DL_FUNC) &_HDRegMfd_single_ind_to_multi_4d, 3},
    {"_HDRegMfd_multi_2d_ind_to_single_range", (DL_FUNC) &_HDRegMfd_multi_2d_ind_to_single_range, 4},
    {"_HDRegMfd_multi_3d_ind_to_single_range", (DL_FUNC) &_HDRegMfd_multi_3d_ind_to_single_range, 5},
    {"_HDRegMfd_numerical_integral_1d", (DL_FUNC) &_HDRegMfd_numerical_integral_1d, 2},
    {"_HDRegMfd_numerical_integral_3d_to_2d", (DL_FUNC) &_HDRegMfd_numerical_integral_3d_to_2d, 2},
    {"_HDRegMfd_numerical_integral_3d", (DL_FUNC) &_HDRegMfd_numerical_integral_3d, 3},
    {"_HDRegMfd_numerical_integral_2d", (DL_FUNC) &_HDRegMfd_numerical_integral_2d, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_HDRegMfd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
