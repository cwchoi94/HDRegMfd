% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/QM_oracle.R
\name{QM.oracle}
\alias{QM.oracle}
\title{Oracle Quantile Linear Regression for manifold-valued covariates.}
\usage{
QM.oracle(
  Xorg,
  Yorg,
  proper.indices = NULL,
  tau = 0.5,
  h = NULL,
  kernel = "Gaussian",
  Xdim.max = 100,
  phi0 = 1e-04,
  c.phi = 1.1,
  max.iter = 500,
  threshold = 1e-10
)
}
\arguments{
\item{Xorg}{a list of covariates with the following components (see also \code{\link{covariates.generate}}):
\describe{
      \item{j}{a \eqn{p} list of manifold-valued covariates, where each \eqn{j}th element is an \eqn{n\times T_j} matrix.}
      \item{spaces}{a \eqn{p} vector of the underlying spaces \eqn{\mathcal{M}_j} of \eqn{X_j}, see \code{\link{Check.manifold}}.}
      \item{p}{the number of \eqn{X_j}.}
}}

\item{Yorg}{an \eqn{n\times m} matrix of responses.}

\item{proper.indices}{an index set \eqn{\mathcal{S}=\{1\le j\le p : \mathfrak{B}_j\neq0\}}.}

\item{tau}{the quantile of Y given X (default: 0.5).}

\item{h}{the bandwidth for smoothing a check function.}

\item{kernel}{the kernel function for smoothing a check function.}

\item{Xdim.max}{the maximum dimension to which \eqn{X_j} will be reduced (default: 100).}

\item{phi0}{the initial \eqn{phi} for updating \eqn{\hat{\beta}}.}

\item{c.phi}{the multiplying constant for \eqn{\phi}.}

\item{max.iter}{a maximum number of iterations (default: 500).}

\item{threshold}{a convergence threshold for the algorithm (default: 1e-10).}
}
\value{
a \code{\link{QM}} object with the following compnents:
   \describe{
      \item{pca}{a \code{\link{PCA.manifold.list}} object.}
      \item{tau}{the quantile.}
      \item{kernel}{the kernel function for smoothing a check function.}
      \item{h}{the bandwidth for smoothing a check function.}
      \item{beta}{a \eqn{L_+^{*} \times m} matrix of estimated \eqn{\bm{\beta}}, where \eqn{L_+^{*}=\sum_{j=1}^p L_j^*} and \eqn{m} is the intrinsic dimension of \eqn{T_{\mu_Y}\mathcal{M}_Y}.}
      \item{beta0}{an \eqn{m} vector of the intercept constant.}
      \item{beta.each}{a \eqn{p} list of \eqn{L_j^*\times m} matrices of \eqn{\bm{\beta}_j}.}
      \item{beta.norm}{a \eqn{p} vector of norms of \eqn{\bm{\beta}_j}.}
      \item{beta.norm0}{the norm of \eqn{{\beta}_0^*}.}
      \item{beta.vectors}{a \eqn{p} list of orthonormal bases of \eqn{X_j} obtained by \code{\link{PCA.manifold.list}}. Each basis is an \eqn{L_j^*\times T_j} matrix.}
      \item{beta.tensor}{a \eqn{p} list of estimated Hilbert-Schmidt operators, see \code{\link{make.tensor}}.}
      \item{proper.indices}{an index set an index set \eqn{\mathcal{S}=\{1\le j\le p : {\mathfrak{B}}_j\neq0\}}.}
      \item{iter.inner}{a vector of iteration numbers for each sub-iteration.}
      \item{runtime}{the running time (HH:MM:SS).}
      \item{runtime.second}{the running time (second).}
      \item{...}{other parameters.}
}
}
\description{
Estimate Hilbert-Schmidt operators using an I-LAMM algorithm with the knowledge of the nonzero index set \eqn{\mathcal{S}=\{j:\mathfrak{B}_j\neq0\}}.
}
